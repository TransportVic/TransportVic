-
    function getTimingsDifference(a, b) {
        let d = new Date(Math.abs(a - b));
        return {minutes: d.getUTCMinutes() + d.getUTCHours() * 60, seconds: d.getUTCSeconds()}
    };
    
    let cityLoopStations = ['southern cross', 'parliament', 'flagstaff', 'melbourne central'];
    
div#filterBar
    input(aria-label='Destination or Platform Number' placeholder='Destination or Platform Number')#filter
    
for timing in timings
    div.trainService(destination=timing.destination.toLowerCase() platform=timing.platform)
        - let {cleanLineName} = timing.trainLine;
        a(class=`trainPlatformData ${cleanLineName}-line` href=`/metro/${cleanLineName}`)
            if timing.platform == 'RRB'
                span
                span RRB
            else
                span Platform
                span=timing.platform

        a(href=`/metro/timings/${timing.destination.toLowerCase().replace(/ /g, '-')}`).destination
            span=timing.trainLine + ' Line Towards'
            if cityLoopStations.includes(timing.destination.toLowerCase())
                span City Loop
            else
                span=timing.destination
            if timing.platform == 'RRB'
                span Rail Replacement Bus
            
            if (timing.runData.upService || cityLoopStations.concat('flinders street').includes(trainStation.stationName.slice(0, -16).toLowerCase())) && timing.platform !== 'RRB'
                span=timing.runData.cityStations.join(', ')

        div.timings
            -
                let headwayDevianceClass = 'unknown'

                if (timing.headwayDeviance >= 90) // >= 1.5min counts as early
                    headwayDevianceClass = 'early'
                else if (timing.headwayDeviance <= -300) // <= 5min counts as late
                    headwayDevianceClass = 'late'
                else if (timing.headwayDeviance !== null)
                    headwayDevianceClass = 'on-time'

            div(class='trainArrival ' + headwayDevianceClass)
                - let timeToDeparture = getTimingsDifference(timing.departureTime, +new Date());
                if timeToDeparture.minutes < 1
                    span='Arr' + (!!timing.runData.expressStopsCount ? ' *' : '')
                else
                    span=timeToDeparture.minutes + (!!timing.runData.expressStopsCount ? ' *' : '')

                if timing.headwayDeviance && headwayDevianceClass !== 'on-time'
                    -
                        let minutes = Math.floor(Math.abs(timing.headwayDeviance) / 60);
                        let seconds = [0].concat([...(Math.abs(timing.headwayDeviance) % 60).toFixed(0)]).slice(-2).join('');
                    span=minutes + ':' + seconds
